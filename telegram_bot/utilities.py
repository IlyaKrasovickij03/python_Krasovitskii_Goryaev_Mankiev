import html
from app import *
from datetime import datetime, timedelta
from apscheduler.triggers.date import DateTrigger
from telebot.apihelper import ApiException
# ==============================
# –§—É–Ω–∫—Ü–∏–∏-—É—Ç–∏–ª–∏—Ç—ã
# ==============================

def escape_html_text(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML."""
    return html.escape(text)


def schedule_notifications(event_id):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
    cursor.execute("SELECT creator_id, participant_id, description, event_datetime FROM events WHERE event_id=?",
                   (event_id,))
    event = cursor.fetchone()
    if not event:
        logging.error(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    creator_id, participant_id, description, event_datetime_str = event
    event_datetime = datetime.fromisoformat(event_datetime_str)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    cursor.execute("SELECT reminder_time FROM reminders WHERE event_id=?", (event_id,))
    reminders = cursor.fetchall()

    for reminder in reminders:
        reminder_time_str = reminder[0]
        reminder_time = datetime.fromisoformat(reminder_time_str)
        if reminder_time > datetime.now():
            job_id = f"reminder_{event_id}_{reminder_time.timestamp()}"
            if not scheduler.get_job(job_id):
                scheduler.add_job(
                    send_reminder,
                    trigger=DateTrigger(run_date=reminder_time),
                    args=[creator_id, participant_id, description, event_id, event_datetime_str],
                    id=job_id,
                    replace_existing=True
                )
                logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –Ω–∞ {reminder_time.isoformat()}.")


def send_reminder(creator_id, participant_id, description, event_id, event_datetime_str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        cursor.execute("SELECT username FROM users WHERE user_id=?", (creator_id,))
        creator = cursor.fetchone()
        creator_username = f"@{escape_html_text(creator[0])}" if creator and creator[
            0] != "No Username" else "No Username"

        cursor.execute("SELECT username FROM users WHERE user_id=?", (participant_id,))
        participant = cursor.fetchone()
        participant_username = f"@{escape_html_text(participant[0])}" if participant and participant[
            0] != "No Username" else "No Username"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
        reminder_text = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html_text(description)}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime.fromisoformat(event_datetime_str).strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_username}\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {participant_username}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é
        bot.send_message(
            creator_id,
            reminder_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É
        bot.send_message(
            participant_id,
            reminder_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")


def main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    my_events_btn = types.InlineKeyboardButton("üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data="my_events")
    create_event_btn = types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event")
    list_users_btn = types.InlineKeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
    markup.add(my_events_btn, create_event_btn, list_users_btn)
    return markup


def back_to_main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    main_menu_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(main_menu_btn)
    return markup





