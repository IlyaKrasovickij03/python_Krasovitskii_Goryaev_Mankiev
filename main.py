import telebot
from telebot import types
import logging
from datetime import datetime, timedelta
import sqlite3
import html
import time
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.date import DateTrigger
from telebot.apihelper import ApiException

# ==============================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
# ==============================
logging.basicConfig(
    level=logging.INFO,  # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ DEBUG –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    format='%(asctime)s %(levelname)s %(message)s',
    handlers=[
        logging.FileHandler("bot.log", encoding='utf-8'),
        logging.StreamHandler()
    ]
)

# ==============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
# ==============================
API_TOKEN = '7895081980:AAFsNiy5hnNbsx18Ep4GJveEfn-WRwY2O3w'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
bot = telebot.TeleBot(API_TOKEN, parse_mode=None)  # parse_mode –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –≤ –∫–∞–∂–¥–æ–º –º–µ—Ç–æ–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ

# ==============================
# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
# ==============================
conn = sqlite3.connect('bot_database.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        first_name TEXT NOT NULL,
        last_name TEXT,
        username TEXT,
        telegram_profile TEXT
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS events (
        event_id INTEGER PRIMARY KEY AUTOINCREMENT,
        creator_id INTEGER NOT NULL,
        participant_id INTEGER NOT NULL,
        description TEXT NOT NULL,
        event_datetime TEXT NOT NULL,
        FOREIGN KEY (creator_id) REFERENCES users(user_id),
        FOREIGN KEY (participant_id) REFERENCES users(user_id)
    )
''')

cursor.execute('''
    CREATE TABLE IF NOT EXISTS reminders (
        reminder_id INTEGER PRIMARY KEY AUTOINCREMENT,
        event_id INTEGER NOT NULL,
        reminder_time TEXT NOT NULL,
        FOREIGN KEY (event_id) REFERENCES events(event_id)
    )
''')
conn.commit()

# ==============================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
# ==============================
scheduler = BackgroundScheduler(timezone="Europe/Moscow")
scheduler.start()
logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–ø—É—â–µ–Ω.")

# ==============================
# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
# ==============================
user_states = {}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_MAIN_MENU = 'MAIN_MENU'
STATE_CREATE_EVENT_SELECT_USER = 'CREATE_EVENT_SELECT_USER'
STATE_CREATE_EVENT_DESCRIPTION = 'CREATE_EVENT_DESCRIPTION'
STATE_CREATE_EVENT_DATETIME = 'CREATE_EVENT_DATETIME'
STATE_ADD_CUSTOM_REMINDER = 'ADD_CUSTOM_REMINDER'
STATE_EDIT_EVENT_DESCRIPTION = 'EDIT_EVENT_DESCRIPTION'
STATE_EDIT_EVENT_DATETIME = 'EDIT_EVENT_DATETIME'


# ==============================
# –§—É–Ω–∫—Ü–∏–∏-—É—Ç–∏–ª–∏—Ç—ã
# ==============================

def escape_html_text(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã HTML."""
    return html.escape(text)


def schedule_notifications(event_id):
    """–ü–ª–∞–Ω–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è."""
    cursor.execute("SELECT creator_id, participant_id, description, event_datetime FROM events WHERE event_id=?",
                   (event_id,))
    event = cursor.fetchone()
    if not event:
        logging.error(f"–°–æ–±—ã—Ç–∏–µ —Å ID {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    creator_id, participant_id, description, event_datetime_str = event
    event_datetime = datetime.fromisoformat(event_datetime_str)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è
    cursor.execute("SELECT reminder_time FROM reminders WHERE event_id=?", (event_id,))
    reminders = cursor.fetchall()

    for reminder in reminders:
        reminder_time_str = reminder[0]
        reminder_time = datetime.fromisoformat(reminder_time_str)
        if reminder_time > datetime.now():
            job_id = f"reminder_{event_id}_{reminder_time.timestamp()}"
            if not scheduler.get_job(job_id):
                scheduler.add_job(
                    send_reminder,
                    trigger=DateTrigger(run_date=reminder_time),
                    args=[creator_id, participant_id, description, event_id, event_datetime_str],
                    id=job_id,
                    replace_existing=True
                )
                logging.info(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id} –Ω–∞ {reminder_time.isoformat()}.")


def send_reminder(creator_id, participant_id, description, event_id, event_datetime_str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        cursor.execute("SELECT username FROM users WHERE user_id=?", (creator_id,))
        creator = cursor.fetchone()
        creator_username = f"@{escape_html_text(creator[0])}" if creator and creator[
            0] != "No Username" else "No Username"

        cursor.execute("SELECT username FROM users WHERE user_id=?", (participant_id,))
        participant = cursor.fetchone()
        participant_username = f"@{escape_html_text(participant[0])}" if participant and participant[
            0] != "No Username" else "No Username"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∏–∫–Ω–µ–π–º–∞–º–∏
        reminder_text = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ —Å–æ–±—ã—Ç–∏–∏:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {escape_html_text(description)}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {datetime.fromisoformat(event_datetime_str).strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_username}\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {participant_username}"
        )
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é
        bot.send_message(
            creator_id,
            reminder_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É
        bot.send_message(
            participant_id,
            reminder_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É {participant_id} –æ —Å–æ–±—ã—Ç–∏–∏ {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")


def main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    my_events_btn = types.InlineKeyboardButton("üìÖ –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", callback_data="my_events")
    create_event_btn = types.InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ", callback_data="create_event")
    list_users_btn = types.InlineKeyboardButton("üë• –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")
    markup.add(my_events_btn, create_event_btn, list_users_btn)
    return markup


def back_to_main_menu_keyboard():
    """–°–æ–∑–¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    markup = types.InlineKeyboardMarkup(row_width=1)
    main_menu_btn = types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    markup.add(main_menu_btn)
    return markup


# ==============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
# ==============================

@bot.message_handler(commands=['start'])
def start(message):
    try:
        user_id = message.from_user.id
        first_name = escape_html_text(message.from_user.first_name)
        last_name = escape_html_text(message.from_user.last_name or "")
        username = escape_html_text(message.from_user.username or "No Username")
        telegram_profile = f"https://t.me/{username}" if message.from_user.username else "No Username"

        logging.debug(f"/start: user_id = {user_id}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
        if cursor.fetchone():
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.send_message(
                user_id,
                "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
                reply_markup=main_menu_keyboard(),
                parse_mode="HTML"
            )
            user_states[user_id] = {'state': STATE_MAIN_MENU}
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute(
            "INSERT INTO users (user_id, first_name, last_name, username, telegram_profile) VALUES (?, ?, ?, ?, ?)",
            (user_id, first_name, last_name, username, telegram_profile)
        )
        conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        bot.send_message(
            user_id,
            f"üëã –ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        user_states[user_id] = {'state': STATE_MAIN_MENU}
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≤ /start: %s", e)
        try:
            bot.send_message(
                message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


@bot.callback_query_handler(func=lambda call: True)
def callback_query_handler(call):
    try:
        user_id = call.from_user.id
        data = call.data
        logging.debug(f"callback_query: user_id = {user_id}, data = {data}")

        user_state = user_states.get(user_id, {'state': STATE_MAIN_MENU})

        if data == "main_menu":
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            bot.send_message(
                user_id,
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=main_menu_keyboard(),
                parse_mode="HTML"
            )
            user_states[user_id]['state'] = STATE_MAIN_MENU
            return

        if data == "create_event":
            initiate_create_event(user_id, call.message)
        elif data.startswith("select_user_"):
            participant_id = int(data.split("_")[-1])
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
            user_states[user_id] = {
                'state': STATE_CREATE_EVENT_DESCRIPTION,
                'participant_id': participant_id
            }
            bot.send_message(
                user_id,
                "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            bot.register_next_step_handler(call.message, get_event_description)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {participant_id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è.")
        elif data == "list_users":
            list_users(user_id)
        elif data == "my_events":
            show_my_events(user_id)
        elif data.startswith("edit_event_"):
            event_id = int(data.split("_")[-1])
            initiate_edit_event(user_id, event_id, call.message)
        elif data.startswith("delete_event_"):
            event_id = int(data.split("_")[-1])
            initiate_delete_event(user_id, event_id, call.message)
        elif data.startswith("confirm_delete_event_"):
            event_id = int(data.split("_")[-1])
            confirm_delete_event(user_id, event_id)
        elif data == "cancel_delete_event":
            cancel_delete_event(user_id)
        elif data == "add_custom_reminder_yes":
            user_states[user_id] = {'state': STATE_ADD_CUSTOM_REMINDER}
            bot.send_message(
                user_id,
                "üïí –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ (1-60):",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            bot.register_next_step_handler(call.message, get_custom_reminder_time)
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
        elif data == "add_custom_reminder_no":
            bot.send_message(
                user_id,
                "‚úÖ –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                reply_markup=main_menu_keyboard(),
                parse_mode="HTML"
            )
            user_states[user_id] = {'state': STATE_MAIN_MENU}
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        else:
            logging.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback_data: {data}")
    except ApiException as api_e:
        logging.error("APIException –≤ callback_query_handler: %s", api_e)
        try:
            bot.send_message(
                call.message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e2:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e2}")
    except Exception as e:
        logging.error("–û—à–∏–±–∫–∞ –≤ callback_query_handler: %s", e)
        try:
            bot.send_message(
                call.message.chat.id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def initiate_create_event(user_id, message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        cursor.execute("SELECT user_id, first_name, last_name, username FROM users WHERE user_id != ?", (user_id,))
        users = cursor.fetchall()
        if not users:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ, –Ω–æ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        markup = types.InlineKeyboardMarkup(row_width=1)
        for user in users:
            uid, first, last, username = user
            if username != "No Username":
                display_username = f"@{escape_html_text(username)}"
            else:
                display_username = "No Username"
            user_display = f"{escape_html_text(first)} {escape_html_text(last)} ({display_username})"
            btn = types.InlineKeyboardButton(user_display, callback_data=f"select_user_{uid}")
            markup.add(btn)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        bot.send_message(
            user_id,
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=markup,
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ initiate_create_event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def list_users(user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."""
    try:
        cursor.execute("SELECT user_id, first_name, last_name, username FROM users")
        users = cursor.fetchall()
        if not users:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –æ–Ω –ø—É—Å—Ç.")
            return

        user_list = ""
        for user in users:
            uid, first, last, username = user
            if username != "No Username":
                display_username = f"@{escape_html_text(username)}"
            else:
                display_username = "No Username"
            user_list += f"üë§ {escape_html_text(first)} {escape_html_text(last)} ({display_username})\n"

        response = f"üìã <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n{user_list}"
        bot.send_message(
            user_id,
            response,
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ list_users –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def show_my_events(user_id):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    try:
        cursor.execute("""
            SELECT event_id, description, event_datetime, participant_id, creator_id
            FROM events
            WHERE creator_id=? OR participant_id=?
            ORDER BY event_datetime
        """, (user_id, user_id))
        events = cursor.fetchall()
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–º–µ–µ—Ç {len(events)} —Å–æ–±—ã—Ç–∏–π.")
        if not events:
            bot.send_message(
                user_id,
                "üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            return

        response = "üìÖ <b>–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:</b>\n\n"
        markup = types.InlineKeyboardMarkup(row_width=1)
        for event in events:
            event_id, description, event_datetime, participant_id, creator_id = event
            try:
                event_dt_obj = datetime.fromisoformat(event_datetime)
                event_dt = event_dt_obj.strftime('%d.%m.%Y %H:%M')
            except ValueError:
                logging.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç event_datetime –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}: {event_datetime}")
                event_dt = event_datetime  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ
            cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (participant_id,))
            participant = cursor.fetchone()
            if participant:
                participant_first, participant_last, participant_username = participant
                if participant_username != "No Username":
                    participant_display = f"@{escape_html_text(participant_username)}"
                else:
                    participant_display = "No Username"
                participant_full = f"{escape_html_text(participant_first)} {escape_html_text(participant_last)} ({participant_display})"
            else:
                participant_full = "Unknown User"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
            cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (creator_id,))
            creator = cursor.fetchone()
            if creator:
                creator_first, creator_last, creator_username = creator
                if creator_username != "No Username":
                    creator_display = f"@{escape_html_text(creator_username)}"
                else:
                    creator_display = "No Username"
                creator_full = f"{escape_html_text(creator_first)} {escape_html_text(creator_last)} ({creator_display})"
            else:
                creator_full = "Unknown User"

            if user_id == creator_id:
                # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å" –∏ "–£–¥–∞–ª–∏—Ç—å" –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
                edit_btn = types.InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event_id}")
                delete_btn = types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_event_{event_id}")
                markup.add(edit_btn, delete_btn)
            response += (
                f"‚Ä¢ <b>ID:</b> {event_id}\n"
                f"  <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"  <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_dt}\n"
                f"  <b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {participant_full}\n"
                f"  <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_full}\n\n"
            )

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        markup.add(types.InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))

        bot.send_message(
            user_id,
            response,
            reply_markup=markup,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_my_events –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–æ–±—ã—Ç–∏–π.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def initiate_edit_event(user_id, event_id, message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏—è
        cursor.execute("SELECT creator_id FROM events WHERE event_id=?", (event_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(
                user_id,
                "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ {event_id}.")
            return

        creator_id = result[0]
        if user_id != creator_id:
            bot.send_message(
                user_id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id}, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {creator_id}.")
            return

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
        user_states[user_id] = {
            'state': STATE_EDIT_EVENT_DESCRIPTION,
            'event_id': event_id
        }
        bot.send_message(
            user_id,
            "‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, edit_event_description)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ initiate_edit_event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def initiate_delete_event(user_id, event_id, message):
    """–ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏—è
        cursor.execute("SELECT creator_id, participant_id FROM events WHERE event_id=?", (event_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(
                user_id,
                "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–±—ã—Ç–∏–µ {event_id}.")
            return

        creator_id, participant_id = result
        if user_id != creator_id:
            bot.send_message(
                user_id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id}, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–∑–¥–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {creator_id}.")
            return

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        markup = types.InlineKeyboardMarkup(row_width=2)
        confirm_btn = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_delete_event_{event_id}")
        cancel_btn = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete_event")
        markup.add(confirm_btn, cancel_btn)
        new_text = f"üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ ID:{event_id}?"
        bot.send_message(
            user_id,
            new_text,
            reply_markup=markup,
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ initiate_delete_event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def confirm_delete_event(user_id, event_id):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏—è
        cursor.execute("SELECT creator_id, participant_id FROM events WHERE event_id=?", (event_id,))
        result = cursor.fetchone()
        if not result:
            bot.send_message(
                user_id,
                "‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.",
                parse_mode="HTML"
            )
            logging.warning(f"–°–æ–±—ã—Ç–∏–µ {event_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ —É–¥–∞–ª–µ–Ω–∏—è.")
            return

        creator_id, participant_id = result
        if user_id != creator_id:
            bot.send_message(
                user_id,
                "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.",
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É–¥–∞–ª–∏—Ç—å —á—É–∂–æ–µ —Å–æ–±—ã—Ç–∏–µ {event_id}.")
            return

        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM reminders WHERE event_id=?", (event_id,))
        conn.commit()

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("DELETE FROM events WHERE event_id=?", (event_id,))
        conn.commit()
        logging.info(f"–°–æ–±—ã—Ç–∏–µ {event_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}.")

        # –û—Ç–º–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
        job_prefix = f"reminder_{event_id}_"
        jobs = scheduler.get_jobs()
        for job in jobs:
            if job.id.startswith(job_prefix):
                scheduler.remove_job(job.id)
                logging.info(f"–£–¥–∞–ª–µ–Ω–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ {job.id} –¥–ª—è —Å–æ–±—ã—Ç–∏—è {event_id}.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
        send_event_deleted_notifications(event_id, creator_id, participant_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_message(
            user_id,
            "‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        user_states[user_id] = {'state': STATE_MAIN_MENU}
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.",
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def cancel_delete_event(user_id):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è."""
    try:
        bot.send_message(
            user_id,
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        user_states[user_id] = {'state': STATE_MAIN_MENU}
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ cancel_delete_event –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è.",
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def send_event_deleted_notifications(event_id, creator_id, participant_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–º, —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ."""
    try:
        notification_text = f"üóëÔ∏è –°–æ–±—ã—Ç–∏–µ ID:{event_id} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º."

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫—É
        bot.send_message(
            participant_id,
            notification_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫—É {participant_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é
        bot.send_message(
            creator_id,
            notification_text,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")


# ==============================
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
# ==============================

def get_event_description(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    if state.get('state') != STATE_CREATE_EVENT_DESCRIPTION:
        try:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è.")
        return

    description = escape_html_text(message.text.strip())
    if not description:
        try:
            msg = bot.send_message(
                user_id,
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è.")
            bot.register_next_step_handler(msg, get_event_description)
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        return

    user_states[user_id]['description'] = description
    user_states[user_id]['state'] = STATE_CREATE_EVENT_DATETIME

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    try:
        bot.send_message(
            user_id,
            "üïí –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, get_event_datetime)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {description}")
    except ApiException as api_e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: {api_e}")


def get_event_datetime(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    if state.get('state') != STATE_CREATE_EVENT_DATETIME:
        try:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    datetime_text = message.text.strip()
    try:
        event_datetime = datetime.strptime(datetime_text, "%d.%m.%Y %H:%M")
        if event_datetime < datetime.now():
            try:
                msg = bot.send_message(
                    user_id,
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ: {datetime_text}")
                bot.register_next_step_handler(msg, get_event_datetime)
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        participant_id = state.get('participant_id')
        if not participant_id:
            logging.error(f"–ù–µ—Ç participant_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            try:
                bot.send_message(
                    user_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        cursor.execute("""
            SELECT * FROM events
            WHERE participant_id=? AND event_datetime=?
        """, (participant_id, event_datetime.isoformat()))
        if cursor.fetchone():
            try:
                msg = bot.send_message(
                    user_id,
                    "‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                logging.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Å–æ–∑–¥–∞—Ç—å –ø–µ—Ä–µ—Å–µ–∫–∞—é—â–µ–µ—Å—è —Å–æ–±—ã—Ç–∏–µ –Ω–∞ {event_datetime.isoformat()}.")
                bot.register_next_step_handler(msg, get_event_datetime)
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
        description = state.get('description', 'No Description')

        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO events (creator_id, participant_id, description, event_datetime)
            VALUES (?, ?, ?, ?)
        """, (user_id, participant_id, description, event_datetime.isoformat()))
        conn.commit()
        event_id = cursor.lastrowid
        logging.info(
            f"–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: ID={event_id}, –û–ø–∏—Å–∞–Ω–∏–µ='{description}', –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è={event_datetime.isoformat()}, –£—á–∞—Å—Ç–Ω–∏–∫={participant_id}")

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (24 —á–∞—Å–∞ –∏ 2 —á–∞—Å–∞)
        standard_reminders = [timedelta(days=1), timedelta(hours=2)]
        for delta in standard_reminders:
            reminder_time = event_datetime - delta
            if reminder_time > datetime.now():
                cursor.execute("""
                    INSERT INTO reminders (event_id, reminder_time)
                    VALUES (?, ?)
                """, (event_id, reminder_time.isoformat()))
                conn.commit()
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        schedule_notifications(event_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
        send_event_created_notifications(user_id, event_id)

        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        user_states[user_id] = {'state': STATE_ADD_CUSTOM_REMINDER}
        bot.send_message(
            user_id,
            "üéØ –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è?",
            reply_markup=types.InlineKeyboardMarkup(row_width=2).add(
                types.InlineKeyboardButton("–î–∞", callback_data="add_custom_reminder_yes"),
                types.InlineKeyboardButton("–ù–µ—Ç", callback_data="add_custom_reminder_no")
            ),
            parse_mode="HTML"
        )
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å–æ–∑–¥–∞–ª —Å–æ–±—ã—Ç–∏–µ {event_id} –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–ª –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")

    except ValueError:
        try:
            msg = bot.send_message(
                user_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏: {datetime_text}")
            bot.register_next_step_handler(msg, get_event_datetime)
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_event_datetime –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def send_event_created_notifications(creator_id, event_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—á–∞—Å—Ç–Ω–∏–∫—É."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
        cursor.execute("""
            SELECT event_id, participant_id, description, event_datetime FROM events
            WHERE event_id=?
        """, (event_id,))
        event = cursor.fetchone()
        if not event:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ —Å ID {event_id}.")
            return

        event_id, participant_id, description, event_datetime_str = event
        event_datetime = datetime.fromisoformat(event_datetime_str).strftime('%d.%m.%Y %H:%M')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ
        cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (participant_id,))
        participant = cursor.fetchone()
        if participant:
            participant_first, participant_last, participant_username = participant
            if participant_username != "No Username":
                participant_display = f"@{escape_html_text(participant_username)}"
            else:
                participant_display = "No Username"
            participant_full = f"{escape_html_text(participant_first)} {escape_html_text(participant_last)} ({participant_display})"
        else:
            participant_full = "Unknown User"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (creator_id,))
        creator = cursor.fetchone()
        if creator:
            creator_first, creator_last, creator_username = creator
            if creator_username != "No Username":
                creator_display = f"@{escape_html_text(creator_username)}"
            else:
                creator_display = "No Username"
            creator_full = f"{escape_html_text(creator_first)} {escape_html_text(creator_last)} ({creator_display})"
        else:
            creator_full = "Unknown User"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        notification_message_participant = (
            f"üìÖ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_datetime}\n"
            f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_full}"
        )
        bot.send_message(
            participant_id,
            notification_message_participant,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫—É {participant_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        notification_message_creator = (
            f"üìÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_datetime}\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {participant_full}"
        )
        bot.send_message(
            creator_id,
            notification_message_creator,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")


def edit_event_description(message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è."""
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    if state.get('state') != STATE_EDIT_EVENT_DESCRIPTION:
        try:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è.")
        return

    new_description = escape_html_text(message.text.strip())
    if not new_description:
        try:
            msg = bot.send_message(
                user_id,
                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –ø—É—Å—Ç–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è.")
            bot.register_next_step_handler(msg, edit_event_description)
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        return

    user_states[user_id]['new_description'] = new_description
    user_states[user_id]['state'] = STATE_EDIT_EVENT_DATETIME

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è
    try:
        bot.send_message(
            user_id,
            "üïí –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:",
            reply_markup=back_to_main_menu_keyboard(),
            parse_mode="HTML"
        )
        bot.register_next_step_handler(message, edit_event_datetime)
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è: {new_description}")
    except ApiException as api_e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: {api_e}")


def edit_event_datetime(message):
    """–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è."""
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    if state.get('state') != STATE_EDIT_EVENT_DATETIME:
        try:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
        return

    datetime_text = message.text.strip()
    try:
        new_event_datetime = datetime.strptime(datetime_text, "%d.%m.%Y %H:%M")
        if new_event_datetime < datetime.now():
            try:
                msg = bot.send_message(
                    user_id,
                    "‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∏–Ω–∞—è —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏:",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –¥–∞—Ç—É –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {datetime_text}")
                bot.register_next_step_handler(msg, edit_event_datetime)
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        event_id = state.get('event_id')
        new_description = state.get('new_description')

        if not event_id:
            logging.error(f"–ù–µ—Ç event_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.")
            try:
                bot.send_message(
                    user_id,
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
        cursor.execute("""
            SELECT * FROM events
            WHERE participant_id=(SELECT participant_id FROM events WHERE event_id=?)
            AND event_datetime=?
            AND event_id != ?
        """, (event_id, new_event_datetime.isoformat(), event_id))
        if cursor.fetchone():
            try:
                msg = bot.send_message(
                    user_id,
                    "‚ùå –í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è:",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                logging.info(
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ {event_id} –Ω–∞ –∑–∞–Ω—è—Ç–æ–µ –≤—Ä–µ–º—è {new_event_datetime.isoformat()}.")
                bot.register_next_step_handler(msg, edit_event_datetime)
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            return

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            UPDATE events
            SET description=?, event_datetime=?
            WHERE event_id=?
        """, (new_description, new_event_datetime.isoformat(), event_id))
        conn.commit()
        logging.info(
            f"–°–æ–±—ã—Ç–∏–µ {event_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –û–ø–∏—Å–∞–Ω–∏–µ='{new_description}', –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è='{new_event_datetime.isoformat()}'.")

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        cursor.execute("DELETE FROM reminders WHERE event_id=?", (event_id,))
        conn.commit()

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (24 —á–∞—Å–∞ –∏ 2 —á–∞—Å–∞)
        standard_reminders = [timedelta(days=1), timedelta(hours=2)]
        for delta in standard_reminders:
            reminder_time = new_event_datetime - delta
            if reminder_time > datetime.now():
                cursor.execute("""
                    INSERT INTO reminders (event_id, reminder_time)
                    VALUES (?, ?)
                """, (event_id, reminder_time.isoformat()))
                conn.commit()
        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        schedule_notifications(event_id)

        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[user_id] = {'state': STATE_MAIN_MENU}

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–æ–∏–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è
        send_event_updated_notifications(user_id, event_id)

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        bot.send_message(
            user_id,
            "‚úÖ –í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}.")
    except ValueError:
        try:
            msg = bot.send_message(
                user_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY HH:MM:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {datetime_text}")
            bot.register_next_step_handler(msg, edit_event_datetime)
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ edit_event_datetime –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


def send_event_updated_notifications(creator_id, event_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è —Å–æ–∑–¥–∞—Ç–µ–ª—é –∏ —É—á–∞—Å—Ç–Ω–∏–∫—É."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
        cursor.execute("""
            SELECT event_id, participant_id, description, event_datetime FROM events
            WHERE event_id=?
        """, (event_id,))
        event = cursor.fetchone()
        if not event:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ —Å ID {event_id}.")
            return

        event_id, participant_id, description, event_datetime_str = event
        event_datetime = datetime.fromisoformat(event_datetime_str).strftime('%d.%m.%Y %H:%M')

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —É—á–∞—Å—Ç–Ω–∏–∫–µ
        cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (participant_id,))
        participant = cursor.fetchone()
        if participant:
            participant_first, participant_last, participant_username = participant
            if participant_username != "No Username":
                participant_display = f"@{escape_html_text(participant_username)}"
            else:
                participant_display = "No Username"
            participant_full = f"{escape_html_text(participant_first)} {escape_html_text(participant_last)} ({participant_display})"
        else:
            participant_full = "Unknown User"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ
        cursor.execute("SELECT first_name, last_name, username FROM users WHERE user_id=?", (creator_id,))
        creator = cursor.fetchone()
        if creator:
            creator_first, creator_last, creator_username = creator
            if creator_username != "No Username":
                creator_display = f"@{escape_html_text(creator_username)}"
            else:
                creator_display = "No Username"
            creator_full = f"{escape_html_text(creator_first)} {escape_html_text(creator_last)} ({creator_display})"
        else:
            creator_full = "Unknown User"

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
        notification_message_participant = (
            f"üìÖ –°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_datetime}\n"
            f"<b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {creator_full}"
        )
        bot.send_message(
            participant_id,
            notification_message_participant,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–£—á–∞—Å—Ç–Ω–∏–∫—É {participant_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")

        # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–∑–¥–∞—Ç–µ–ª—è
        notification_message_creator = (
            f"üìÖ –í—ã –æ–±–Ω–æ–≤–∏–ª–∏ —Å–æ–±—ã—Ç–∏–µ:\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event_datetime}\n"
            f"<b>–£—á–∞—Å—Ç–Ω–∏–∫:</b> {participant_full}"
        )
        bot.send_message(
            creator_id,
            notification_message_creator,
            parse_mode="HTML",
            disable_web_page_preview=True
        )
        logging.info(f"–°–æ–∑–¥–∞—Ç–µ–ª—é {creator_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è {event_id}: {e}")


def get_custom_reminder_time(message):
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    user_id = message.from_user.id
    state = user_states.get(user_id, {})
    if state.get('state') != STATE_ADD_CUSTOM_REMINDER:
        try:
            bot.send_message(
                user_id,
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.")
        return

    minutes_text = message.text.strip()
    try:
        minutes = int(minutes_text)
        if not (1 <= minutes <= 60):
            raise ValueError("–ú–∏–Ω—É—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        cursor.execute("SELECT event_id, event_datetime FROM events WHERE creator_id=? ORDER BY event_id DESC LIMIT 1",
                       (user_id,))
        event = cursor.fetchone()
        if not event:
            try:
                bot.send_message(
                    user_id,
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ.",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")
            return

        event_id, event_datetime_str = event
        event_datetime = datetime.fromisoformat(event_datetime_str)
        reminder_time = event_datetime - timedelta(minutes=minutes)

        if reminder_time < datetime.now():
            try:
                bot.send_message(
                    user_id,
                    "‚ùå –í—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —É–∂–µ –ø—Ä–æ—à–ª–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.",
                    reply_markup=back_to_main_menu_keyboard(),
                    parse_mode="HTML"
                )
            except ApiException as api_e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ø—ã—Ç–∞–ª—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—à–µ–¥—à–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.")
            return

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("""
            INSERT INTO reminders (event_id, reminder_time)
            VALUES (?, ?)
        """, (event_id, reminder_time.isoformat()))
        conn.commit()

        # –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        schedule_notifications(event_id)

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        confirmation_text = (
            f"‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {event_datetime.strftime('%d.%m.%Y %H:%M')}.\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è –Ω–∞ {reminder_time.strftime('%d.%m.%Y %H:%M')}."
        )
        bot.send_message(
            user_id,
            confirmation_text,
            reply_markup=main_menu_keyboard(),
            parse_mode="HTML"
        )
        # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_states[user_id] = {'state': STATE_MAIN_MENU}
        logging.info(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–∏–ª –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ {minutes} –º–∏–Ω—É—Ç –¥–æ —Å–æ–±—ã—Ç–∏—è {event_id}.")
    except ValueError:
        try:
            msg = bot.send_message(
                user_id,
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 60:",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
            logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç: {minutes_text}")
            bot.register_next_step_handler(msg, get_custom_reminder_time)
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ get_custom_reminder_time –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        try:
            bot.send_message(
                user_id,
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.",
                reply_markup=back_to_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except ApiException as api_e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {api_e}")


# ==============================
# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
# ==============================

if __name__ == "__main__":
    while True:
        try:
            logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –Ω–∞—á–∞–ª polling.")
            bot.infinity_polling(timeout=60, long_polling_timeout=60)
        except Exception as e:
            logging.error(f"Polling failed: {e}")
            logging.info("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –∑–∞–ø—É—Å–∫–æ–º